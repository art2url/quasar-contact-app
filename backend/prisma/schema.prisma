// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PUBLIC_URL")
}

model User {
  id              String    @id @default(cuid())
  username        String    @unique
  email           String    @unique
  passwordHash    String
  publicKeyBundle Json?
  avatarUrl       String    @default("")
  isKeyMissing    Boolean   @default(false)
  lastKeyMarkTime BigInt?
  keyMarkCount    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  passwordResets   PasswordReset[]
  roomMemberships  Room[]    @relation("RoomMembers")
  
  @@map("users")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  ciphertext String
  timestamp  DateTime @default(now())
  read       Boolean  @default(false)
  avatarUrl  String?
  editedAt   DateTime?
  deleted    Boolean  @default(false)
  deletedAt  DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model Room {
  id        String   @id @default(cuid())
  isDm      Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  members User[] @relation("RoomMembers")
  
  @@map("rooms")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_resets")
}
